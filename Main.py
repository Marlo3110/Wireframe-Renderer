import pygame as pg
import time, math as m

points = [
    [0.000000, -1.000000, 0.200738],
    [0.000000, 1.000000, 0.000000],
    [0.000000, -1.000000, -0.200738],
    [-0.058685, -1.030000, 0.026791],
    [-0.058685, -1.030000, -0.026791],
    [-0.054941, -1.030000, 0.000000],
    [0.058685, -1.030000, -0.026791],
    [0.058685, -1.030000, 0.026791],
    [0.054941, -1.030000, 0.000000],
    [0.000000, 0.579786, 0.250717],
    [0.000000, 0.579786, -0.250717],
    [0.073297, 0.579786, 0.033462],
    [0.073297, 0.579786, -0.033462],
    [-0.073297, 0.579786, -0.033462],
    [-0.073297, 0.579786, 0.033462],
    [-0.000000, -0.969116, 0.357705],
    [-0.000000, -0.969116, -0.357705],
    [-0.119315, -1.024458, 0.054470],
    [-0.119315, -1.024458, -0.054470],
    [-0.120720, -1.025689, 0.000000],
    [0.119315, -1.024458, -0.054470],
    [0.119315, -1.024458, 0.054470],
    [0.120720, -1.025689, 0.000000],
    [-0.054941, -1.074037, -0.000000],
    [-0.058685, -1.074037, 0.026791],
    [-0.058685, -1.074037, -0.026791],
    [0.054941, -1.074037, -0.000000],
    [0.058685, -1.074037, -0.026791],
    [0.058685, -1.074037, 0.026791],
    [0.000000, -1.044037, 0.200738],
    [0.000000, -1.044037, -0.200738],
    [-0.119158, -1.082803, -0.000000],
    [-0.120720, -1.066430, -0.000000],
    [-0.119315, -1.065199, 0.054470],
    [-0.117764, -1.081587, 0.053762],
    [-0.117764, -1.081587, -0.053762],
    [-0.119315, -1.065199, -0.054470],
    [0.119158, -1.082803, -0.000000],
    [0.120720, -1.066430, -0.000000],
    [0.119315, -1.065199, -0.054470],
    [0.117764, -1.081587, -0.053762],
    [0.117764, -1.081587, 0.053762],
    [0.119315, -1.065199, 0.054470],
    [-0.000000, -1.009857, 0.357705],
    [-0.000000, -1.026968, 0.353025],
    [-0.000000, -1.026968, -0.353025],
    [-0.000000, -1.009857, -0.357705],
    [0.062090, -1.692007, -0.107544],
    [-0.000000, -1.692007, -0.124181],
    [-0.000000, -1.692007, -0.089273],
    [-0.000000, -1.060722, -0.089273],
    [0.044636, -1.692007, -0.077312],
    [0.044636, -1.060722, -0.077312],
    [0.077312, -1.692007, -0.044636],
    [0.077312, -1.060722, -0.044636],
    [0.089273, -1.692007, 0.000000],
    [0.089273, -1.060722, 0.000000],
    [0.077312, -1.692007, 0.044636],
    [0.077312, -1.060722, 0.044636],
    [0.044636, -1.692007, 0.077312],
    [0.044636, -1.060722, 0.077312],
    [-0.000000, -1.692007, 0.089273],
    [-0.000000, -1.060722, 0.089273],
    [-0.044636, -1.692007, 0.077312],
    [-0.044636, -1.060722, 0.077312],
    [-0.077312, -1.692007, 0.044636],
    [-0.077312, -1.060722, 0.044636],
    [-0.089273, -1.692007, 0.000000],
    [-0.089273, -1.060722, 0.000000],
    [-0.077312, -1.692007, -0.044636],
    [-0.077312, -1.060722, -0.044636],
    [-0.044636, -1.692007, -0.077312],
    [-0.044636, -1.060722, -0.077312],
    [0.107544, -1.692007, -0.062091],
    [0.124181, -1.692007, -0.000000],
    [0.107544, -1.692007, 0.062091],
    [0.062090, -1.692007, 0.107544],
    [-0.000000, -1.692007, 0.124181],
    [-0.062090, -1.692007, 0.107544],
    [-0.107544, -1.692007, 0.062091],
    [-0.124181, -1.692007, -0.000000],
    [-0.107544, -1.692007, -0.062091],
    [-0.062090, -1.692007, -0.107544],
    [-0.062090, -1.772903, -0.107544],
    [0.000000, -1.772903, -0.124181],
    [-0.107544, -1.772903, -0.062091],
    [-0.124181, -1.772903, -0.000000],
    [-0.107544, -1.772903, 0.062091],
    [-0.062090, -1.772903, 0.107544],
    [0.000000, -1.772903, 0.124181],
    [0.062091, -1.772903, 0.107544],
    [0.107544, -1.772903, 0.062091],
    [0.124181, -1.772903, -0.000000],
    [0.107544, -1.772903, -0.062091],
    [0.062091, -1.772903, -0.107544]
]

#-Display and update Pygame window-#
BgColor = (0,0,0)
Screen_Y = 500
Screen_X = 500
screen = pg.display.set_mode([Screen_X, Screen_Y])
screen.fill(BgColor)
pg.display.set_caption("Vertex Renderer V1.0")
pg.display.flip() 
running = True

#- projection parameters -#
focal_length = 300
camera_pos = [0,-0.25,-2]

#- miscellaneous variables -#
updated = False

#- functions -#
def render_point(point, camera_pos, size=2.5):
    # Calculate depth (distance from camera)
    depth = point[2] - camera_pos[2]
    
    if abs(depth) < 1e-6:
        depth = 1e-6  # Avoid division by zero

    # Perspective projection formulas
    x = focal_length * (point[0] - camera_pos[0]) / depth
    y = focal_length * (point[1] - camera_pos[1]) / depth
    
    # Convert to screen coordinates
    screen_x = int(Screen_X / 2 + x)
    screen_y = int(Screen_Y / 2 - y)
    
    # Draw the point using a tuple for the rectangle
    #print(screen_y, screen_x)
    pg.draw.rect(screen, (250,250,250), pg.Rect(int(screen_x - size // 2), int(screen_y - size // 2), size, size))
    pg.display.flip()

def Clear_Screen(Screen):
    screen.fill(BgColor)
    pg.display.flip()
    

def Move_Camera(xyz = list):
    global updated
    updated = False
    camera_pos[0] += xyz[0]
    camera_pos[1] += xyz[1]
    camera_pos[2] += xyz[2]
    print("Camera Moved!", camera_pos)
    Clear_Screen(screen)

#- Main Loop -#   s
while running:
    for event in pg.event.get():
    
        if event.type == pg.QUIT: 
            running = False

    if updated == False:
        for i in points:
            render_point(i, camera_pos, 2)
            if i == points[-1]:
                updated = True
                print("Screen succesfully loaded!")

    time.sleep(5)
    Move_Camera([0.1,0,0])

